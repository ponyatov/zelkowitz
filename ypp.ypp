%{
#include "hpp.hpp"
%}
%defines %union { Sym*o; }
%token <o> SYM
%token <o> ADD SUB MUL DIV POW EQ DOT AND TILD
%type <o> ex scalar
%left EQ DOT
%left ADD SUB
%left MUL DIV
%left POW
%left PFX
%%
REPL : | REPL ex { cout << $2->dump() << endl; } ;
scalar : SYM ;
ex : scalar
	| TILD ex			{ $$=$1; $$->push($2); }				/* prefix */
	| ADD ex %prec PFX	{ $$=$1; $$->push($2); }
	| SUB ex %prec PFX	{ $$=$1; $$->push($2); }
	| AND ex %prec PFX	{ $$=$1; $$->push($2); }
	| ex ADD ex			{ $$=$2; $$->push($1); $$->push($3); }	/* infix */
	| ex SUB ex			{ $$=$2; $$->push($1); $$->push($3); }
	| ex AND ex			{ $$=$2; $$->push($1); $$->push($3); }
	| ex MUL ex			{ $$=$2; $$->push($1); $$->push($3); }
	| ex DIV ex			{ $$=$2; $$->push($1); $$->push($3); }
	| ex POW ex			{ $$=$2; $$->push($1); $$->push($3); }
	| ex EQ ex			{ $$=$2; $$->push($1); $$->push($3); }
	| ex DOT ex			{ $$=$2; $$->push($1); $$->push($3); }
;
%%
